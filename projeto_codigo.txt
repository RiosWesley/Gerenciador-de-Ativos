

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\src\components\Dashboard\AssetsBreakdown.jsx ===

import React, { useState, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { Loader2 } from 'lucide-react';
import PortfolioService from '../../services/portfolioService';

const AssetsBreakdown = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [assetData, setAssetData] = useState([]);

  useEffect(() => {
    const fetchAssetData = async () => {
      try {
        const portfolioService = new PortfolioService();
        const balances = await portfolioService.getConsolidatedBalance();
        const prices = await portfolioService.getAllPrices();
        
        // Processar dados dos ativos
        const processedData = [];
        
        // Processar Binance
        balances.binance.forEach(balance => {
          const price = prices.binance.find(p => p.symbol === `${balance.asset}USDT`);
          if (price) {
            const value = (parseFloat(balance.free) + parseFloat(balance.locked)) * parseFloat(price.price);
            processedData.push({
              asset: balance.asset,
              exchange: 'Binance',
              amount: parseFloat(balance.free) + parseFloat(balance.locked),
              value: value,
              price: parseFloat(price.price)
            });
          }
        });

        // Processar MEXC
        balances.mexc.forEach(balance => {
          const price = prices.mexc.find(p => p.symbol === `${balance.asset}USDT`);
          if (price) {
            const value = (parseFloat(balance.free) + parseFloat(balance.locked)) * parseFloat(price.price);
            processedData.push({
              asset: balance.asset,
              exchange: 'MEXC',
              amount: parseFloat(balance.free) + parseFloat(balance.locked),
              value: value,
              price: parseFloat(price.price)
            });
          }
        });

        // Ordenar por valor
        processedData.sort((a, b) => b.value - a.value);
        setAssetData(processedData);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchAssetData();
    const interval = setInterval(fetchAssetData, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-500 p-4">
        Erro ao carregar dados: {error}
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Gráfico de Barras */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="text-lg font-semibold mb-4">Distribuição de Ativos</div>
        <div className="h-96">
          <ResponsiveContainer width="100%" height="100%">
            <BarChart data={assetData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="asset" />
              <YAxis 
                tickFormatter={(value) => `$${value.toLocaleString('pt-BR', { maximumFractionDigits: 0 })}`}
              />
              <Tooltip 
                formatter={(value) => `$${value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}
              />
              <Bar dataKey="value" fill="#8884d8" />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      {/* Lista de Ativos */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="text-lg font-semibold mb-4">Lista de Ativos</div>
        <div className="divide-y">
          {assetData.map((asset, index) => (
            <div key={`${asset.asset}-${asset.exchange}`} className="py-4">
              <div className="flex justify-between items-start">
                <div>
                  <div className="font-semibold">{asset.asset}</div>
                  <div className="text-sm text-gray-500">{asset.exchange}</div>
                </div>
                <div className="text-right">
                  <div className="font-semibold">
                    ${asset.value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                  </div>
                  <div className="text-sm text-gray-500">
                    {asset.amount.toLocaleString('pt-BR', { maximumFractionDigits: 8 })} {asset.asset}
                  </div>
                  <div className="text-sm text-gray-500">
                    ${asset.price.toLocaleString('pt-BR', { minimumFractionDigits: 2 })} /unidade
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default AssetsBreakdown;

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\src\components\Dashboard\Dashboard.jsx ===

// src/components/Dashboard/Dashboard.jsx
import React, { useState } from 'react';
import { Loader2 } from 'lucide-react';
import PortfolioSummary from './PortfolioSummary';
import AssetsBreakdown from './AssetsBreakdown';
import PriceHistory from './PriceHistory';
import PriceAlerts from './PriceAlerts';

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState('portfolio');

  const renderContent = () => {
    switch (activeTab) {
      case 'portfolio':
        return (
          <div className="space-y-8">
            {/* Seção de Sumário */}
            <section>
              <h2 className="text-xl font-semibold text-gray-700 mb-4">
                Visão Geral do Portfólio
              </h2>
              <PortfolioSummary />
            </section>

            {/* Grid de duas colunas para Histórico e Alertas */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              <section>
                <h2 className="text-xl font-semibold text-gray-700 mb-4">
                  Histórico de Preços
                </h2>
                <PriceHistory />
              </section>

              <section>
                <h2 className="text-xl font-semibold text-gray-700 mb-4">
                  Alertas
                </h2>
                <PriceAlerts />
              </section>
            </div>

            {/* Seção de Detalhamento */}
            <section>
              <h2 className="text-xl font-semibold text-gray-700 mb-4">
                Detalhamento dos Ativos
              </h2>
              <AssetsBreakdown />
            </section>
          </div>
        );

      case 'investments':
        return (
          <div>
            {/* Aqui será renderizado o componente de Investimentos */}
            <h2 className="text-xl font-semibold text-gray-700 mb-4">
              Investimentos
            </h2>
            {/* Placeholder para o componente de Investimentos */}
          </div>
        );

      case 'balances':
        return (
          <div>
            {/* Aqui será renderizado o componente de Saldos */}
            <h2 className="text-xl font-semibold text-gray-700 mb-4">
              Saldos das Exchanges
            </h2>
            {/* Placeholder para o componente de Saldos */}
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header com Navegação */}
      <header className="bg-white shadow">
        <div className="max-w-7xl mx-auto">
          <div className="flex flex-col space-y-4 py-6 px-4 sm:px-6 lg:px-8">
            <h1 className="text-3xl font-bold text-gray-900">
              Dashboard de Investimentos
            </h1>
            
            {/* Navegação */}
            <nav className="flex space-x-4 border-b border-gray-200">
              <button
                onClick={() => setActiveTab('portfolio')}
                className={`px-3 py-2 text-sm font-medium ${
                  activeTab === 'portfolio'
                    ? 'border-b-2 border-blue-500 text-blue-600'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                Portfólio
              </button>
              <button
                onClick={() => setActiveTab('investments')}
                className={`px-3 py-2 text-sm font-medium ${
                  activeTab === 'investments'
                    ? 'border-b-2 border-blue-500 text-blue-600'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                Investimentos
              </button>
              <button
                onClick={() => setActiveTab('balances')}
                className={`px-3 py-2 text-sm font-medium ${
                  activeTab === 'balances'
                    ? 'border-b-2 border-blue-500 text-blue-600'
                    : 'text-gray-500 hover:text-gray-700'
                }`}
              >
                Saldos
              </button>
            </nav>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        {renderContent()}
      </main>

      {/* Footer com informações adicionais */}
      <footer className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
        <p className="text-center text-sm text-gray-500">
          Dados atualizados automaticamente a cada 5 minutos
        </p>
      </footer>
    </div>
  );
};

export default Dashboard;

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\src\components\Dashboard\PortfolioSummary.jsx ===

import React, { useState, useEffect } from 'react';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';
import { Loader2 } from 'lucide-react';
import PortfolioService from '../../services/portfolioService';

const PortfolioSummary = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [portfolioData, setPortfolioData] = useState({
    total: 0,
    binance: 0,
    mexc: 0
  });

  // Cores para o gráfico de pizza
  const COLORS = ['#0088FE', '#00C49F'];

  useEffect(() => {
    const fetchPortfolioData = async () => {
      try {
        const portfolioService = new PortfolioService();
        const balances = await portfolioService.getConsolidatedBalance();
        const prices = await portfolioService.getAllPrices();
        const portfolio = portfolioService.calculatePortfolioValue(balances, prices);
        
        setPortfolioData(portfolio);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchPortfolioData();
    const interval = setInterval(fetchPortfolioData, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  const chartData = [
    { name: 'Binance', value: portfolioData.binance },
    { name: 'MEXC', value: portfolioData.mexc }
  ];

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-500 p-4">
        Erro ao carregar dados: {error}
      </div>
    );
  }

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {/* Card de Valor Total */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="text-lg font-semibold mb-2">Valor Total</div>
        <div className="text-2xl font-bold">
          ${portfolioData.total.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
        </div>
      </div>

      {/* Card de Distribuição por Exchange */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="text-lg font-semibold mb-2">Distribuição por Exchange</div>
        <div className="h-48">
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={chartData}
                cx="50%"
                cy="50%"
                innerRadius={60}
                outerRadius={80}
                paddingAngle={5}
                dataKey="value"
              >
                {chartData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                ))}
              </Pie>
              <Tooltip
                formatter={(value) => `$${value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}
              />
            </PieChart>
          </ResponsiveContainer>
        </div>
        <div className="grid grid-cols-2 gap-2 mt-4">
          <div className="flex items-center">
            <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: COLORS[0] }} />
            <span>Binance</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: COLORS[1] }} />
            <span>MEXC</span>
          </div>
        </div>
      </div>

      {/* Card de Detalhes por Exchange */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="text-lg font-semibold mb-4">Detalhes por Exchange</div>
        <div className="space-y-4">
          <div>
            <div className="text-sm text-gray-500">Binance</div>
            <div className="text-xl font-semibold">
              ${portfolioData.binance.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
            </div>
          </div>
          <div>
            <div className="text-sm text-gray-500">MEXC</div>
            <div className="text-xl font-semibold">
              ${portfolioData.mexc.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PortfolioSummary;

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\src\components\Dashboard\PriceAlerts.jsx ===

import React, { useState, useEffect } from 'react';
import { Bell, Plus, Trash2 } from 'lucide-react';

const PriceAlerts = () => {
  const [alerts, setAlerts] = useState(() => {
    const savedAlerts = localStorage.getItem('priceAlerts');
    return savedAlerts ? JSON.parse(savedAlerts) : [];
  });

  const [newAlert, setNewAlert] = useState({
    asset: 'BTC',
    condition: 'above',
    price: '',
    active: true
  });

  useEffect(() => {
    localStorage.setItem('priceAlerts', JSON.stringify(alerts));
  }, [alerts]);

  const handleAddAlert = () => {
    if (!newAlert.price) return;

    setAlerts([...alerts, { ...newAlert, id: Date.now() }]);
    setNewAlert({
      asset: 'BTC',
      condition: 'above',
      price: '',
      active: true
    });
  };

  const handleDeleteAlert = (id) => {
    setAlerts(alerts.filter(alert => alert.id !== id));
  };

  const toggleAlertStatus = (id) => {
    setAlerts(alerts.map(alert => 
      alert.id === id ? { ...alert, active: !alert.active } : alert
    ));
  };

  return (
    <div className="bg-white rounded-lg shadow">
      {/* Header */}
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center gap-2">
          <Bell className="h-5 w-5" />
          <h2 className="text-lg font-semibold">Alertas de Preço</h2>
        </div>
      </div>

      <div className="p-6">
        {/* Formulário para novo alerta */}
        <div className="flex gap-4 mb-6">
          <select
            value={newAlert.asset}
            onChange={(e) => setNewAlert({ ...newAlert, asset: e.target.value })}
            className="bg-white border border-gray-300 rounded-md px-3 py-2"
          >
            <option value="BTC">Bitcoin (BTC)</option>
            <option value="ETH">Ethereum (ETH)</option>
            <option value="BNB">Binance Coin (BNB)</option>
          </select>

          <select
            value={newAlert.condition}
            onChange={(e) => setNewAlert({ ...newAlert, condition: e.target.value })}
            className="bg-white border border-gray-300 rounded-md px-3 py-2"
          >
            <option value="above">Acima de</option>
            <option value="below">Abaixo de</option>
          </select>

          <input
            type="number"
            value={newAlert.price}
            onChange={(e) => setNewAlert({ ...newAlert, price: e.target.value })}
            placeholder="Preço"
            className="bg-white border border-gray-300 rounded-md px-3 py-2"
          />

          <button
            onClick={handleAddAlert}
            className="flex items-center gap-2 bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
          >
            <Plus className="h-4 w-4" />
            Adicionar Alerta
          </button>
        </div>

        {/* Lista de alertas */}
        <div className="space-y-4">
          {alerts.length === 0 ? (
            <div className="text-center text-gray-500 py-8">
              Nenhum alerta configurado
            </div>
          ) : (
            alerts.map(alert => (
              <div 
                key={alert.id} 
                className={`flex items-center justify-between p-4 rounded-lg border ${
                  alert.active ? 'bg-white' : 'bg-gray-50'
                }`}
              >
                <div className="flex items-center gap-4">
                  <input
                    type="checkbox"
                    checked={alert.active}
                    onChange={() => toggleAlertStatus(alert.id)}
                    className="h-4 w-4"
                  />
                  <div>
                    <div className="font-medium">{alert.asset}</div>
                    <div className="text-sm text-gray-500">
                      {alert.condition === 'above' ? 'Acima de' : 'Abaixo de'} ${Number(alert.price).toLocaleString()}
                    </div>
                  </div>
                </div>
                
                <button
                  onClick={() => handleDeleteAlert(alert.id)}
                  className="text-red-500 hover:text-red-600"
                >
                  <Trash2 className="h-4 w-4" />
                </button>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
};

export default PriceAlerts;

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\src\components\Dashboard\PriceHistory.jsx ===

import React, { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { Loader2 } from 'lucide-react';
import PortfolioService from '../../services/portfolioService';

const PriceHistory = () => {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedAsset, setSelectedAsset] = useState('BTC');
  const [timeRange, setTimeRange] = useState('1d');
  const [priceData, setPriceData] = useState([]);
  const [availableAssets, setAvailableAssets] = useState([]);

  useEffect(() => {
    const fetchPriceData = async () => {
      try {
        const portfolioService = new PortfolioService();
        const balances = await portfolioService.getConsolidatedBalance();
        
        // Obter lista única de ativos
        const assets = new Set();
        balances.binance.forEach(balance => assets.add(balance.asset));
        balances.mexc.forEach(balance => assets.add(balance.asset));
        setAvailableAssets(Array.from(assets));

        // Simular dados históricos
        const now = Date.now();
        const historicalData = Array(24).fill(0).map((_, i) => ({
          timestamp: new Date(now - (23 - i) * 3600000).toISOString(),
          price: Math.random() * 1000 + 40000
        }));

        setPriceData(historicalData);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchPriceData();
    const interval = setInterval(fetchPriceData, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, [selectedAsset, timeRange]);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-500 p-4">
        Erro ao carregar dados: {error}
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow">
      <div className="px-6 py-4 border-b border-gray-200 flex flex-row items-center justify-between">
        <h2 className="text-lg font-semibold">Histórico de Preços</h2>
        <div className="flex space-x-2">
          {/* Seletor de Ativo */}
          <select
            value={selectedAsset}
            onChange={(e) => setSelectedAsset(e.target.value)}
            className="bg-white border border-gray-300 rounded-md px-3 py-1 text-sm"
          >
            {availableAssets.map(asset => (
              <option key={asset} value={asset}>{asset}</option>
            ))}
          </select>

          {/* Seletor de Período */}
          <select
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value)}
            className="bg-white border border-gray-300 rounded-md px-3 py-1 text-sm"
          >
            <option value="1d">1 Dia</option>
            <option value="1w">1 Semana</option>
            <option value="1m">1 Mês</option>
            <option value="3m">3 Meses</option>
            <option value="1y">1 Ano</option>
          </select>
        </div>
      </div>

      <div className="p-6">
        <div className="h-[400px]">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart data={priceData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis 
                dataKey="timestamp" 
                tickFormatter={(timestamp) => {
                  const date = new Date(timestamp);
                  return `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;
                }}
              />
              <YAxis 
                domain={['auto', 'auto']}
                tickFormatter={(value) => `$${value.toLocaleString()}`}
              />
              <Tooltip 
                formatter={(value) => [`$${value.toLocaleString()}`, 'Preço']}
                labelFormatter={(timestamp) => new Date(timestamp).toLocaleString()}
              />
              <Line 
                type="monotone" 
                dataKey="price" 
                stroke="#8884d8" 
                dot={false}
                strokeWidth={2}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Estatísticas do Período */}
        <div className="grid grid-cols-3 gap-4 mt-4">
          <div className="text-center">
            <div className="text-sm text-gray-500">Preço Mais Alto</div>
            <div className="font-semibold">
              ${Math.max(...priceData.map(d => d.price)).toLocaleString()}
            </div>
          </div>
          <div className="text-center">
            <div className="text-sm text-gray-500">Preço Mais Baixo</div>
            <div className="font-semibold">
              ${Math.min(...priceData.map(d => d.price)).toLocaleString()}
            </div>
          </div>
          <div className="text-center">
            <div className="text-sm text-gray-500">Variação</div>
            <div className="font-semibold">
              {((priceData[priceData.length - 1].price / priceData[0].price - 1) * 100).toFixed(2)}%
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PriceHistory;

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\src\App.jsx ===

import React from 'react';
import Dashboard from './components/Dashboard/Dashboard';

function App() {
  return (
    <div>
      <Dashboard />
    </div>
  );
}

export default App;

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\src\index.css ===

@tailwind base;
@tailwind components;
@tailwind utilities;

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\src\main.jsx ===

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\.env ===

REACT_APP_BINANCE_API_KEY=BoBgkE7jCc7rlQUsk8H1M222CbeP9TSqpLPgo6DGIOq8XGo7SK2e1OZmDlUETsLC
REACT_APP_BINANCE_API_SECRET=mi8HY4FbKPypoaT0XQDth1AqAO7dpWSahrqw8SqVnsIDn2cFm7fC6RwZq12xSSIN
REACT_APP_MEXC_API_KEY=mx0vglpHfMQW2oRlym
REACT_APP_MEXC_API_SECRET=acd93ef29eec4d95bbd760658930547b

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\index.html ===

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Gerenciador de Ativos</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\package.json ===

{
  "name": "gerenciador-de-ativos",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@heroicons/react": "^2.0.18",
    "axios": "^1.6.2",
    "lucide-react": "^0.263.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "recharts": "^2.10.3",
    "shadcn": "^2.1.7"
  },
  "devDependencies": {
    "@types/react": "^18.2.43",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "tailwindcss": "^3.3.6",
    "vite": "^5.0.8"
  }
}

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\postcss.config.js ===

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\tailwind.config.js ===

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

=== E:\Users\Wesley\Documents\Gerenciador de Ativos\vite.config.js ===

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import path from 'path';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
});
